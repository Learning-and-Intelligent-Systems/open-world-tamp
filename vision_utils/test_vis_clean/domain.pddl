(define (domain pr2-tamp)
  (:requirements :strips :equality)
  (:constants base left right head)
  (:predicates
    (Arm ?a)
    (Stackable ?o ?r)
    (Sink ?r)
    (Stove ?r)

    (Graspable ?o)
    ;(Scannable ?r)
    ;(Registerable ?o)

    (Pose ?o ?p)
    (Grasp ?o ?g)
    (Kin ?a ?o ?p ?g ?q ?t)
    (BaseMotion ?q1 ?t ?q2)
    (ArmMotion ?a ?q1 ?t ?q2)
    (Supported ?o ?p ?r)
    (Vis ?o ?p ?bq ?hq ?ht)

    (VisRange ?o ?p ?bq)
    (RegRange ?o ?p ?bq)

    (TrajPoseCollision ?t ?o ?p)
    (TrajArmCollision ?t ?a ?q)
    (TrajGraspCollision ?t ?a ?o ?g)

    (AtPose ?o ?p)
    (AtGrasp ?a ?o ?g)
    (AtGraspFinal ?a ?o ?g)
    (HandEmpty ?a)
    (AtBConf ?q)
    (AtAConf ?a ?q)
    (CanMove)
    (Cleaned ?o)
    (Cooked ?o)

    (Uncertain ?o)
    ;(Scanned ?o)
    (Localized ?o)
    (Registered ?o)

    (On ?o ?r)
    (Holding ?a ?o)
    (UnsafeBTraj ?t)

    (Visp ?pvis ?bq)
    (Fo ?vs)
    (Po ?vs)
    (Visible ?vs)
    (SampledVis ?p)

    (Block ?o ?p ?pb)
    (UnBlock ?o ?p ?pvis)
    (Targeted ?o)
    (Target ?o)
    (HoldTarget)
    (Blind ?pvis)
    (ValidVis ?pvis)
    (Blocky ?o)
    (VisClear ?pvis)
  )
  (:functions
    (MoveCost ?t)
    (PickCost)
    (PlaceCost)
    (ScanCost)
    (LocalizeCost ?r ?o)
    (RegisterCost)
  )

  ;(:action move_base
  ;  :parameters (?q1 ?q2 ?t)
  ;  :precondition (and (BaseMotion ?q1 ?t ?q2)
  ;                     (AtBConf ?q1) (CanMove) (not (UnsafeBTraj ?t)))
  ;  :effect (and (AtBConf ?q2)
  ;               (not (AtBConf ?q1)) (not (CanMove))
  ;               (increase (total-cost) (MoveCost ?t)))
  ;)
  ;(:action move_arm
  ;  :parameters (?q1 ?q2 ?t)
  ;  :precondition (and (ArmMotion ?a ?q1 ?t ?q2)
  ;                     (AtAConf ?a ?q1))
  ;  :effect (and (AtAConf ?a ?q2)
  ;               (not (AtAConf ?a ?q1)))
  ;)
  (:action picktarget
    :parameters (?a ?o ?p ?g ?q ?t ?vs)
    :precondition (and (Kin ?a ?o ?p ?g ?q ?t) (Registered ?o) 
                       (AtPose ?o ?p) (HandEmpty ?a) (AtBConf ?q) (Targeted ?o))
    :effect (and (AtGrasp ?a ?o ?g) (CanMove) 
                 (not (AtPose ?o ?p)) (not (HandEmpty ?a))
                 (increase (total-cost) (PickCost)))
  )
  (:action pickblock
    :parameters (?a ?o ?p ?g ?q ?t ?pvis ?vs)
    :precondition (and (Kin ?a ?o ?p ?g ?q ?t) (AtPose ?o ?p)
                       (HandEmpty ?a) (AtBConf ?q) (Block ?o ?p ?pvis) (Po ?vs) (Registered ?o))
    :effect (and (AtGrasp ?a ?o ?g) (CanMove)
                 (not (AtPose ?o ?p)) (not (HandEmpty ?a))
                 ;(not (Block ?o ?p ?pb))
                 ;(Fo ?vs) (not (Po ?vs))
                 (VisClear ?pvis)
                 (increase (total-cost) (PickCost))
            )
  )
  ;(:action place
  ;  :parameters (?a ?o ?p ?g ?q ?t)
  ;  :precondition (and (Kin ?a ?o ?p ?g ?q ?t)
  ;                     (AtGrasp ?a ?o ?g) (AtBConf ?q))
  ;  :effect (and (AtPose ?o ?p) (HandEmpty ?a) (CanMove)
  ;               (not (AtGrasp ?a ?o ?g))
  ;               (increase (total-cost) (PlaceCost))
  ;          )
  ;)
  (:action placeblock
    :parameters (?a ?o ?p ?g ?q ?t ?pvis ?vs)
    :precondition (and (Kin ?a ?o ?p ?g ?q ?t)
                       (AtGrasp ?a ?o ?g) ;(Block ?o ?p ?pb) 
                       (AtBConf ?q) (UnBlock ?o ?p ?vs) 
                       ;(Po ?vs) 
                  )
    :effect (and (AtPose ?o ?p) (HandEmpty ?a) (CanMove)
                 (not (AtGrasp ?a ?o ?g)) 
                 (increase (total-cost) (PlaceCost))
                 ;(Fo ?vs) (not (Po ?vs))
            )
  ) 
  ;(:action scan
  ;  :parameters (?o ?p ?bq ?hq ?ht)
  ;  :precondition (and (Vis ?o ?p ?bq ?hq ?ht) (VisRange ?o ?p ?bq) (Scannable ?o)
  ;                     (AtPose ?o ?p) (AtBConf ?bq) (Localized ?o))
  ;  :effect (and (Scanned ?o) (CanMove)
  ;               (increase (total-cost) (ScanCost)))
  ;)
  ;(:action localize
  ;  :parameters (?r ?p1 ?o ?p2)
  ;  :precondition (and (Stackable ?o ?r) (Pose ?r ?p1) (Pose ?o ?p2) ; (FiniteScanCost ?r ?o)
  ;                 (AtPose ?o ?p2) (Scanned ?r) (Uncertain ?o))
  ;  :effect (and (Localized ?o) (Supported ?o ?p2 ?r)
  ;               (not (Uncertain ?o))
  ;               (increase (total-cost) (LocalizeCost ?r ?o)))
  ;)
  ;(:action register
  ;  :parameters (?o ?p ?bq ?hq ?ht)
  ;  :precondition (and (Vis ?o ?p ?bq ?hq ?ht) (RegRange ?o ?p ?bq) (Registerable ?o)
  ;                     (AtPose ?o ?p) (AtBConf ?bq) (Localized ?o))
  ;  :effect (and (Registered ?o) (CanMove)
  ;               (increase (total-cost) (RegisterCost)))
  ;)
  (:action mark-target
    :parameters (?o)
    :precondition (and (Registered ?o) (Target ?o))
    :effect (Targeted ?o)
  )
  (:action observe
    :parameters (?pvis ?bq ?vs)
    :precondition (and (Visible ?vs) (Po ?vs) (Visp ?pvis ?bq) 
                   (VisClear ?pvis) )
                    ;(not (Blind ?pvis))    
    :effect (and (Fo ?vs) (not (Po ?vs))
                 (increase (total-cost) (ScanCost))
            )
  )
 
  ;(:action make-valid-vis
  ;  :parameters (?pvis)
  ;  :precondition (not (Blind ?pvis))
  ;  :effect (ValidVis ?pvis)
  ;)

  ;(:derived (Blind ?pvis)
  ;  (forall (?o ?pobj) (when (Block ?o ?pobj ?pvis) (not (AtPose ?o ?pobj))))
  ;)
  (:derived (Blind ?pvis)
    (exists (?o ?pobj) (and (Block ?o ?pobj ?pvis) (AtPose ?o ?pobj)))
  )

  ;(:derived (Fopair ?vs)
  ;  (exists (?vsp) (and (Fo ?vsp) (some_sort_of_eq ?vs ?vsp)) )
  ;)

  ;(:action clean
  ;  :parameters (?o ?r)
  ;  :precondition (and (Stackable ?o ?r) (Sink ?r)
  ;                     (On ?o ?r))
  ;  :effect (Cleaned ?o)
  ;)
  ;(:action cook
  ;  :parameters (?o ?r)
  ;  :precondition (and (Stackable ?o ?r) (Stove ?r)
  ;                     (On ?o ?r) (Cleaned ?o))
  ;  :effect (and (Cooked ?o)
  ;               (not (Cleaned ?o)))
  ;)

  ;(:derived (VBlockPose ?pb)
  ;  (exists (?o ?p) (Block ?o ?p ?pb))
  ;)
  (:derived (On ?o ?r)
    (exists (?p) (and (Supported ?o ?p ?r)
                      (AtPose ?o ?p)))
  )
  (:derived (Holding ?a ?o)
    (exists (?g) (and (Arm ?a) (Grasp ?o ?g)
                      (AtGrasp ?a ?o ?g)))
  )
  (:derived (HoldTarget)
    (exists (?o ?a ?g) (and (Targeted ?o) (AtGrasp ?a ?o ?g))
    )
  )
  (:derived (UnsafeBTraj ?t) (or
    (exists (?o2 ?p2) (and (TrajPoseCollision ?t ?o2 ?p2)
                           (AtPose ?o2 ?p2)))
    (exists (?a ?q) (and (TrajArmCollision ?t ?a ?q)
                         (AtAConf ?a ?q)))
    (exists (?a ?o ?g) (and (TrajGraspCollision ?t ?a ?o ?g)
                         (AtGrasp ?a ?o ?g)))
  ))
)
